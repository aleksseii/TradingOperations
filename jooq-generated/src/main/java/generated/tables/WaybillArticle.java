/*
 * This file is generated by jOOQ.
 */
package generated.tables;


import generated.Keys;
import generated.Public;
import generated.tables.records.WaybillArticleRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WaybillArticle extends TableImpl<WaybillArticleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.waybill_article</code>
     */
    public static final WaybillArticle WAYBILL_ARTICLE = new WaybillArticle();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WaybillArticleRecord> getRecordType() {
        return WaybillArticleRecord.class;
    }

    /**
     * The column <code>public.waybill_article.waybill_article_id</code>.
     */
    public final TableField<WaybillArticleRecord, Integer> WAYBILL_ARTICLE_ID = createField(DSL.name("waybill_article_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.waybill_article.price</code>.
     */
    public final TableField<WaybillArticleRecord, Long> PRICE = createField(DSL.name("price"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.waybill_article.amount</code>.
     */
    public final TableField<WaybillArticleRecord, Integer> AMOUNT = createField(DSL.name("amount"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("1", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.waybill_article.waybill_id</code>.
     */
    public final TableField<WaybillArticleRecord, Integer> WAYBILL_ID = createField(DSL.name("waybill_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.waybill_article.product_id</code>.
     */
    public final TableField<WaybillArticleRecord, Integer> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.INTEGER, this, "");

    private WaybillArticle(Name alias, Table<WaybillArticleRecord> aliased) {
        this(alias, aliased, null);
    }

    private WaybillArticle(Name alias, Table<WaybillArticleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.waybill_article</code> table reference
     */
    public WaybillArticle(String alias) {
        this(DSL.name(alias), WAYBILL_ARTICLE);
    }

    /**
     * Create an aliased <code>public.waybill_article</code> table reference
     */
    public WaybillArticle(Name alias) {
        this(alias, WAYBILL_ARTICLE);
    }

    /**
     * Create a <code>public.waybill_article</code> table reference
     */
    public WaybillArticle() {
        this(DSL.name("waybill_article"), null);
    }

    public <O extends Record> WaybillArticle(Table<O> child, ForeignKey<O, WaybillArticleRecord> key) {
        super(child, key, WAYBILL_ARTICLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<WaybillArticleRecord, Integer> getIdentity() {
        return (Identity<WaybillArticleRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<WaybillArticleRecord> getPrimaryKey() {
        return Keys.WAYBILL_ARTICLE_PK;
    }

    @Override
    public List<ForeignKey<WaybillArticleRecord, ?>> getReferences() {
        return Arrays.asList(Keys.WAYBILL_ARTICLE__WAYBILL_ARTICLE_WAYBILL_ID_FKEY, Keys.WAYBILL_ARTICLE__WAYBILL_ARTICLE_PRODUCT_ID_FKEY);
    }

    private transient Waybill _waybill;
    private transient Product _product;

    /**
     * Get the implicit join path to the <code>public.waybill</code> table.
     */
    public Waybill waybill() {
        if (_waybill == null)
            _waybill = new Waybill(this, Keys.WAYBILL_ARTICLE__WAYBILL_ARTICLE_WAYBILL_ID_FKEY);

        return _waybill;
    }

    /**
     * Get the implicit join path to the <code>public.product</code> table.
     */
    public Product product() {
        if (_product == null)
            _product = new Product(this, Keys.WAYBILL_ARTICLE__WAYBILL_ARTICLE_PRODUCT_ID_FKEY);

        return _product;
    }

    @Override
    public List<Check<WaybillArticleRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("positive_amount"), "((amount > 0))", true),
            Internal.createCheck(this, DSL.name("positive_price"), "((price > 0))", true)
        );
    }

    @Override
    public WaybillArticle as(String alias) {
        return new WaybillArticle(DSL.name(alias), this);
    }

    @Override
    public WaybillArticle as(Name alias) {
        return new WaybillArticle(alias, this);
    }

    @Override
    public WaybillArticle as(Table<?> alias) {
        return new WaybillArticle(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public WaybillArticle rename(String name) {
        return new WaybillArticle(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WaybillArticle rename(Name name) {
        return new WaybillArticle(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public WaybillArticle rename(Table<?> name) {
        return new WaybillArticle(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Long, Integer, Integer, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super Long, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super Long, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
